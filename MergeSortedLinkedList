public class MergeSortedLinkedLists{
    public static void main( String[] args ) {
        LinkedList<Integer> ll1 = new LinkedList<>();
        LinkedList<Integer> ll2 = new LinkedList<>();

        ll1.add( 1 );
        ll1.add( 3 );
        ll1.add( 5 );
        ll1.add( 6 );
        ll1.add( 8 );
        ll2.add( 2 );
        ll2.add( 4 );
        ll2.add( 8 );
        ll2.add( 9 );

        System.out.println( "final one: " + merge( ll1, ll2 ) );
    }

    private static List<Integer> merge( List<Integer> list1, List<Integer> list2 ) {
        if ( list1.size() == 0 ) {
            return list2;
        } else if ( list2.size() == 0 ) {
            return list1;
        } else if ( list1.size() == 1 ) {
            add( list1.get( 0 ), list2 );
            return list2;
        } else if ( list2.size() == 1 ) {
            add( list2.get( 0 ), list1 );
            return list1;
        } else if ( list1.size() <= list2.size() ) {
            for ( Integer i : list1 ) {
                add( i, list2 );
            }
            return list2;
        } else {
            for ( Integer i : list2 ) {
                add( i, list1 );
            }
            return list1;
        }
    }

    private static void add( Integer integer, List<Integer> list ) {
        int midIndexList2 = list.size() / 2;
        int size = list.size();
        if ( integer > list.get( midIndexList2 ) ) {
            if ( midIndexList2 < size - 1 )
                add( integer, list.subList( midIndexList2 + 1, size ) );
            else
                list.add( size, integer );

        } else if ( integer < list.get( midIndexList2 ) ) {
            if ( midIndexList2 > 0 ) {
                add( integer, list.subList( 0, midIndexList2 ) );
            } else
                list.add( 0, integer );
        }
    }
}
